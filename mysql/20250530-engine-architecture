# 📚 MySQL 아키텍처 & 구성 요소 정리

---

## ✅ 학습 주제

* MySQL 엔진(SQL Layer)과 스토리지 엔진 구조 이해
* 포그라운드 vs 백그라운드 스레드의 역할 구분
* InnoDB와 MyISAM 비교
* 핸들러 API(Handler API)의 동작 원리

---

## 🧩 핵심 개념 요약

| 개념            | 설명                                    |
| ------------- | ------------------------------------- |
| **MySQL 엔진**  | SQL 처리 핵심 계층. 파서, 옵티마이저, 실행기 등 포함     |
| **스토리지 엔진**   | 실제 데이터를 저장/읽기 하는 계층. InnoDB, MyISAM 등 |
| **포그라운드 스레드** | 클라이언트 요청을 처리하는 스레드 (SQL 실행 등)         |
| **스레드 캐시**    | 재사용 가능한 유휴 스레드를 보관하여 성능 최적화           |
| **백그라운드 스레드** | 로그 기록, 페이지 플러시 등 내부 시스템 관리용 스레드       |
| **버퍼/캐시**     | 메모리 공간으로, 디스크 I/O 최소화를 위해 사용          |
| **핸들러 API**   | SQL Layer와 스토리지 엔진을 연결하는 내부 인터페이스     |

---

## ⚙️ MySQL 엔진과 스토리지 엔진 구조

```text
[클라이언트]
  ↓
[MySQL 엔진 (SQL Layer)]
  ├─ 파서
  ├─ 옵티마이저
  └─ 실행기 → [핸들러 API 호출]
      ↓
[스토리지 엔진 (InnoDB 등)]
      ↓
[디스크: 데이터 파일, 로그 파일]
```

---

## 💡 포그라운드 vs 백그라운드 스레드

| 구분    | 포그라운드 스레드         | 백그라운드 스레드                              |
| ----- | ----------------- | -------------------------------------- |
| 주체    | 클라이언트 요청 처리       | 내부 유지관리                                |
| 생성 시점 | 클라이언트 접속 시        | 서버 시작 시 자동 생성                          |
| 주요 기능 | SQL 파싱, 실행, 응답    | Redo/Undo 처리, 로그 플러시, 페이지 정리 등         |
| 예시    | SELECT, INSERT 처리 | Flush Thread, Log Writer, Purge Thread |

---

## 🆚 InnoDB vs MyISAM

| 항목    | InnoDB   | MyISAM        |
| ----- | -------- | ------------- |
| 트랜잭션  | ✅ 지원     | ❌ 미지원         |
| 잠금    | 행 단위     | 테이블 단위        |
| 복구    | 자동       | 수동            |
| 외래키   | 지원       | 미지원           |
| 저장 방식 | 클러스터 인덱스 | 데이터/인덱스 분리    |
| 용도    | 동시성/안정성  | 빠른 읽기, 정적 테이블 |

---

## 🔗 핸들러 API (Handler API)

> MySQL 엔진(SQL Layer)이 스토리지 엔진과 통신하기 위해 사용하는 내부 인터페이스

| API 함수                          | 설명             |
| ------------------------------- | -------------- |
| `ha_read_row()`                 | 행 읽기           |
| `ha_write_row()`                | 행 삽입           |
| `ha_update_row()`               | 행 수정           |
| `ha_delete_row()`               | 행 삭제           |
| `ha_commit()` / `ha_rollback()` | 트랜잭션 처리        |
| `ha_index_read_map()`           | 인덱스를 사용한 조건 검색 |

📌 각 스토리지 엔진은 이 API를 구현해서 MySQL 엔진의 요청을 수행함.

---

## 🛠️ 실무 인사이트

* `thread_cache_size`는 성능 최적화의 핵심 → Threads\_created 지표로 판단
* 스토리지 엔진 선택은 기능보다 **데이터 특성과 트랜잭션 요구**에 맞춰야 함
* 핸들러 API는 성능 분석에서도 중요 (EXPLAIN + handler counters 분석)
* 포그라운드 스레드는 절대 디스크 쓰기를 직접 하지 않고, 백그라운드 스레드에 위임함

---

## 📌 마무리 요약

> **MySQL은 SQL 처리와 실제 데이터 저장을 분리한 계층적 구조**를 가지며,
> **핸들러 API를 통해 SQL 엔진과 스토리지 엔진이 유연하게 통신**한다.
> **스레드는 요청을 처리하는 포그라운드와 시스템을 유지하는 백그라운드로 명확히 구분**되며,
> **스토리지 엔진은 목적에 따라 교체 가능한 플러그인 구조로 설계**되어 있다.
